Module { uri: Url { scheme: "file", cannot_be_a_base: false, username: "", password: None, host: None, port: None, path: "/home/bohdan/delft/polarity/polarity/test/suites/fail-xfunc/001-local-lets.pol", query: None, fragment: None }, use_decls: [], decls: [Data(Data { span: Span { start: ByteIndex(0), end: ByteIndex(25) }, doc: None, attr: Attributes { attrs: [] }, name: Ident { span: Span { start: ByteIndex(5), end: ByteIndex(8) }, id: "Nat" }, params: Telescope([]), ctors: [Ctor { span: Span { start: ByteIndex(11), end: ByteIndex(12) }, doc: None, name: Ident { span: Span { start: ByteIndex(11), end: ByteIndex(12) }, id: "Z" }, params: Telescope([]), typ: None }, Ctor { span: Span { start: ByteIndex(14), end: ByteIndex(24) }, doc: None, name: Ident { span: Span { start: ByteIndex(14), end: ByteIndex(15) }, id: "S" }, params: Telescope([Param { implicit: false, name: Var { span: Span { start: ByteIndex(16), end: ByteIndex(17) }, name: Ident { span: Span { start: ByteIndex(16), end: ByteIndex(17) }, id: "x" } }, names: [], typ: Call(Call { span: Span { start: ByteIndex(20), end: ByteIndex(23) }, name: Ident { span: Span { start: ByteIndex(20), end: ByteIndex(23) }, id: "Nat" }, args: [] }) }]), typ: None }] }), Let(Let { span: Span { start: ByteIndex(104), end: ByteIndex(160) }, doc: None, name: Ident { span: Span { start: ByteIndex(108), end: ByteIndex(134) }, id: "let_without_annotated_type" }, attr: Attributes { attrs: [] }, params: Telescope([]), typ: Call(Call { span: Span { start: ByteIndex(136), end: ByteIndex(139) }, name: Ident { span: Span { start: ByteIndex(136), end: ByteIndex(139) }, id: "Nat" }, args: [] }), body: LocalLet(LocalLet { span: Span { start: ByteIndex(142), end: ByteIndex(158) }, name: Var { span: Span { start: ByteIndex(146), end: ByteIndex(147) }, name: Ident { span: Span { start: ByteIndex(146), end: ByteIndex(147) }, id: "x" } }, typ: None, bound: Call(Call { span: Span { start: ByteIndex(151), end: ByteIndex(152) }, name: Ident { span: Span { start: ByteIndex(151), end: ByteIndex(152) }, id: "Z" }, args: [] }), body: Call(Call { span: Span { start: ByteIndex(154), end: ByteIndex(158) }, name: Ident { span: Span { start: ByteIndex(154), end: ByteIndex(155) }, id: "S" }, args: [UnnamedArg(Call(Call { span: Span { start: ByteIndex(156), end: ByteIndex(157) }, name: Ident { span: Span { start: ByteIndex(156), end: ByteIndex(157) }, id: "x" }, args: [] }))] }) }) }), Let(Let { span: Span { start: ByteIndex(161), end: ByteIndex(220) }, doc: None, name: Ident { span: Span { start: ByteIndex(165), end: ByteIndex(188) }, id: "let_with_annotated_type" }, attr: Attributes { attrs: [] }, params: Telescope([]), typ: Call(Call { span: Span { start: ByteIndex(190), end: ByteIndex(193) }, name: Ident { span: Span { start: ByteIndex(190), end: ByteIndex(193) }, id: "Nat" }, args: [] }), body: LocalLet(LocalLet { span: Span { start: ByteIndex(196), end: ByteIndex(218) }, name: Var { span: Span { start: ByteIndex(200), end: ByteIndex(201) }, name: Ident { span: Span { start: ByteIndex(200), end: ByteIndex(201) }, id: "x" } }, typ: Some(Call(Call { span: Span { start: ByteIndex(204), end: ByteIndex(207) }, name: Ident { span: Span { start: ByteIndex(204), end: ByteIndex(207) }, id: "Nat" }, args: [] })), bound: Call(Call { span: Span { start: ByteIndex(211), end: ByteIndex(212) }, name: Ident { span: Span { start: ByteIndex(211), end: ByteIndex(212) }, id: "Z" }, args: [] }), body: Call(Call { span: Span { start: ByteIndex(214), end: ByteIndex(218) }, name: Ident { span: Span { start: ByteIndex(214), end: ByteIndex(215) }, id: "S" }, args: [UnnamedArg(Call(Call { span: Span { start: ByteIndex(216), end: ByteIndex(217) }, name: Ident { span: Span { start: ByteIndex(216), end: ByteIndex(217) }, id: "x" }, args: [] }))] }) }) })] }