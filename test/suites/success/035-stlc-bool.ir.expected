def .append(other) {
    Nil => other,
    Cons(t, ts) => Cons(t, ts.append(other)),
}

def .len {
    Nil => Z,
    Cons(x, ts) => S(ts.len),
}

def .subst(v, by) {
    Var(x) => x.cmp(v).subst_result(x, by),
    Lam(e) => Lam(e.subst(S(v), by)),
    App(e1, e2) => App(e1.subst(v, by), e2.subst(v, by)),
    Lit(b) => Lit(b),
    If(cond, then, else) => If(cond.subst(v, by), then.subst(v, by), else.subst(v, by)),
}

def .subst_result(x, by) {
    LT => Var(x),
    EQ => by,
    GT => Var(x.pred),
}

def .progress(t) {
    Var(x) =>
        comatch {
            .ap(h_t) => h_t.match { TVar(x2, x3, x4, elem) => elem.empty_absurd(x, t).elim_bot }
        },
    Lam(e) => comatch { .ap(x1) => PVal(Lam(e), VLam(e)) },
    App(e1, e2) =>
        comatch {
            .ap(h_t) =>
                h_t.match {
                    TApp(x1, t1, t2, x2, x3, e1_t, e2_t) =>
                        e1.progress(FunT(t1, t)).ap(e1_t).match {
                            PStep(x4, e1', e1_eval_e1') =>
                                PStep(App(e1, e2),
                                      App(e1', e2),
                                      ECongApp1(e1, e1', e1_eval_e1', e2)),
                            PVal(x4, is_val) =>
                                is_val.match {
                                    VLit(x5) => e1_t.match { },
                                    VLam(e) => PStep(App(Lam(e), e2), e.subst(Z, e2), EBeta(e, e2)),
                                },
                        }
                }
        },
    Lit(b) => comatch { .ap(x1) => PVal(Lit(b), VLit(b)) },
    If(cond, then, else) =>
        comatch {
            .ap(h_e) =>
                h_e.match {
                    TIf(x1, x2, x3, x4, x5, h_cond, h_then, h_else) =>
                        cond.progress(BooT).ap(h_cond).match {
                            PVal(x6, h_val) =>
                                h_val.match {
                                    VLam(x7) => h_cond.match { },
                                    VLit(b) =>
                                        b.match {
                                            True =>
                                                PStep(If(Lit(True), then, else),
                                                      then,
                                                      EIfTrue(then, else)),
                                            False =>
                                                PStep(If(Lit(False), then, else),
                                                      else,
                                                      EIfFalse(then, else)),
                                        },
                                },
                            PStep(x6, cond', h_eval) =>
                                PStep(If(cond, then, else),
                                      If(cond', then, else),
                                      ECongIf(cond, cond', then, else, h_eval)),
                        }
                }
        },
}

def .preservation(e2, t) {
    Var(x) => comatch { .ap(h_t) => comatch { .ap(h_eval) => h_eval.match { } } },
    Lam(x) => comatch { .ap(h_t) => comatch { .ap(h_eval) => h_eval.match { } } },
    App(e1, e3) =>
        comatch {
            .ap(h_t) =>
                h_t.match {
                    TApp(x1, t1, t2, x2, x3, h_lam, h_e2) =>
                        comatch {
                            .ap(h_eval) =>
                                h_eval.match {
                                    ECongApp1(x6, e1', h, x7) =>
                                        TApp(Nil,
                                             t1,
                                             t,
                                             e1',
                                             e3,
                                             e1.preservation(e1', FunT(t1, t)).ap(h_lam).ap(h),
                                             h_e2),
                                    ECongApp2(x6, x7, e2', h) =>
                                        TApp(Nil,
                                             t1,
                                             t,
                                             e1,
                                             e2',
                                             h_lam,
                                             e3.preservation(e2', t1).ap(h_e2).ap(h)),
                                    EBeta(e4, x6) =>
                                        h_lam.match {
                                            TLam(x7, x8, x9, x10, h_e1) =>
                                                e4.subst_lemma(Nil, Nil, t1, t, e3)
                                                  .ap(h_e1)
                                                  .ap(h_e2)
                                        },
                                }
                        }
                }
        },
    Lit(b) => comatch { .ap(h_t) => comatch { .ap(h_eval) => h_eval.match { } } },
    If(cond, then, else) =>
        comatch {
            .ap(h_t) =>
                comatch {
                    .ap(h_eval) =>
                        h_t.match {
                            TIf(x3, x4, x5, x6, t0, h_cond, h_then, h_else) =>
                                h_eval.match {
                                    ECongIf(x7, cond', x8, x9, h_eval_cond) =>
                                        TIf(Nil,
                                            cond',
                                            then,
                                            else,
                                            t,
                                            cond.preservation(cond', BooT)
                                                .ap(h_cond)
                                                .ap(h_eval_cond),
                                            h_then,
                                            h_else),
                                    EIfTrue(x7, x8) => h_then,
                                    EIfFalse(x7, x8) => h_else,
                                }
                        }
                }
        },
}

def .subst_lemma(ctx1, ctx2, t1, t2, by_e) {
    Var(x) =>
        comatch {
            .ap(h_e) =>
                comatch {
                    .ap(h_by) =>
                        h_e.match {
                            TVar(x4, x5, x6, h_elem) =>
                                x.cmp_reflect(ctx1.len).match {
                                    IsLT(x7, x8, h_eq_lt, h_lt) =>
                                        h_eq_lt.transport(LT,
                                                          x.cmp(ctx1.len),
                                                          comatch { .ap(cmp) => <ZST> },
                                                          ctx2.weaken_append(ctx1, Var(x), t2)
                                                              .ap(TVar(ctx1,
                                                                       x,
                                                                       t2,
                                                                       ctx1.elem_append_first(Cons(t1,
                                                                                                   ctx2),
                                                                                              t2,
                                                                                              x)
                                                                           .ap(h_lt)
                                                                           .ap(h_elem)))),
                                    IsEQ(x7, x8, h_eq_eq, h_eq) =>
                                        h_eq_eq.transport(EQ,
                                                          x.cmp(ctx1.len),
                                                          comatch { .ap(cmp) => <ZST> },
                                                          ctx1.append(ctx2)
                                                              .weaken_append(Nil, by_e, t2)
                                                              .ap(ctx1.ctx_lookup(ctx2, t2, t1)
                                                                      .ap(h_eq.transport(x,
                                                                                         ctx1.len,
                                                                                         comatch {
                                                                                             .ap(x11) =>
                                                                                                 <ZST>
                                                                                         },
                                                                                         h_elem))
                                                                      .transport(t1,
                                                                                 t2,
                                                                                 comatch {
                                                                                     .ap(t) => <ZST>
                                                                                 },
                                                                                 h_by))),
                                    IsGT(x7, x8, h_eq_gt, h_gt) =>
                                        h_eq_gt.transport(GT,
                                                          x.cmp(ctx1.len),
                                                          comatch { .ap(cmp) => <ZST> },
                                                          TVar(ctx1.append(ctx2),
                                                               x.pred,
                                                               t2,
                                                               ctx1.elem_append_pred(ctx2,
                                                                                     t2,
                                                                                     t1,
                                                                                     x)
                                                                   .ap(h_gt)
                                                                   .ap(h_elem))),
                                }
                        }
                }
        },
    Lam(body) =>
        comatch {
            .ap(h_e) =>
                comatch {
                    .ap(h_by) =>
                        h_e.match {
                            TLam(x3, a, b, x4, h_body) =>
                                TLam(ctx1.append(ctx2),
                                     a,
                                     b,
                                     body.subst(S(ctx1.len), by_e),
                                     body.subst_lemma(Cons(a, ctx1), ctx2, t1, b, by_e)
                                         .ap(h_body)
                                         .ap(h_by))
                        }
                }
        },
    App(e1, e2) =>
        comatch {
            .ap(h_e) =>
                comatch {
                    .ap(h_by) =>
                        h_e.match {
                            TApp(x3, a, b, x4, x5, h_e1, h_e2) =>
                                TApp(ctx1.append(ctx2),
                                     a,
                                     t2,
                                     e1.subst(ctx1.len, by_e),
                                     e2.subst(ctx1.len, by_e),
                                     e1.subst_lemma(ctx1, ctx2, t1, FunT(a, t2), by_e)
                                       .ap(h_e1)
                                       .ap(h_by),
                                     e2.subst_lemma(ctx1, ctx2, t1, a, by_e).ap(h_e2).ap(h_by))
                        }
                }
        },
    Lit(b) =>
        comatch {
            .ap(h_e) =>
                comatch { .ap(h_by) => h_e.match { TLit(x3, x4) => TLit(ctx1.append(ctx2), b) } }
        },
    If(cond, then, else) =>
        comatch {
            .ap(h_e) =>
                comatch {
                    .ap(h_by) =>
                        h_e.match {
                            TIf(x3, x4, x5, x6, t, h_cond, h_then, h_else) =>
                                TIf(ctx1.append(ctx2),
                                    cond.subst(ctx1.len, by_e),
                                    then.subst(ctx1.len, by_e),
                                    else.subst(ctx1.len, by_e),
                                    t2,
                                    cond.subst_lemma(ctx1, ctx2, t1, BooT, by_e)
                                        .ap(h_cond)
                                        .ap(h_by),
                                    then.subst_lemma(ctx1, ctx2, t1, t2, by_e).ap(h_then).ap(h_by),
                                    else.subst_lemma(ctx1, ctx2, t1, t2, by_e).ap(h_else).ap(h_by))
                        }
                }
        },
}

def .weaken_append(ctx1, e, t) {
    Nil =>
        comatch {
            .ap(h_e) =>
                ctx1.append_nil
                    .transport(ctx1, ctx1.append(Nil), comatch { .ap(ctx) => <ZST> }, h_e)
        },
    Cons(t', ts) =>
        comatch {
            .ap(h_e) =>
                ctx1.append_assoc(Cons(t', Nil), ts)
                    .transport(ctx1.append(Cons(t', Nil)).append(ts),
                               ctx1.append(Cons(t', ts)),
                               comatch { .ap(ctx) => <ZST> },
                               ts.weaken_append(ctx1.append(Cons(t', Nil)), e, t)
                                 .ap(e.weaken_cons(ctx1, t', t).ap(h_e)))
        },
}

def .weaken_cons(ctx, t1, t2) {
    Var(x) =>
        comatch {
            .ap(h_e) =>
                h_e.match {
                    TVar(x2, x3, x4, h_elem) =>
                        TVar(ctx.append(Cons(t1, Nil)), x, t2, h_elem.elem_append(x, t1, t2, ctx))
                }
        },
    Lam(e) =>
        comatch {
            .ap(h_e) =>
                h_e.match {
                    TLam(x1, a, b, x2, h_e0) =>
                        TLam(ctx.append(Cons(t1, Nil)),
                             a,
                             b,
                             e,
                             e.weaken_cons(Cons(a, ctx), t1, b).ap(h_e0))
                }
        },
    App(e1, e2) =>
        comatch {
            .ap(h_e) =>
                h_e.match {
                    TApp(x1, a, b, x2, x3, h_e1, h_e2) =>
                        TApp(ctx.append(Cons(t1, Nil)),
                             a,
                             t2,
                             e1,
                             e2,
                             e1.weaken_cons(ctx, t1, FunT(a, t2)).ap(h_e1),
                             e2.weaken_cons(ctx, t1, a).ap(h_e2))
                }
        },
    Lit(b) =>
        comatch { .ap(h_e) => h_e.match { TLit(x1, x2) => TLit(ctx.append(Cons(t1, Nil)), b) } },
    If(cond, then, else) =>
        comatch {
            .ap(h_e) =>
                h_e.match {
                    TIf(x1, x2, x3, x4, t, h_cond, h_then, h_else) =>
                        TIf(ctx.append(Cons(t1, Nil)),
                            cond,
                            then,
                            else,
                            t2,
                            cond.weaken_cons(ctx, t1, BooT).ap(h_cond),
                            then.weaken_cons(ctx, t1, t2).ap(h_then),
                            else.weaken_cons(ctx, t1, t2).ap(h_else))
                }
        },
}

def .elem_append(n, t1, t2, ctx) {
    Here(t, ts) => Here(t2, ts.append(Cons(t1, Nil))),
    There(n0, x, t', ts, h) =>
        There(n0, t2, t', ts.append(Cons(t1, Nil)), h.elem_append(n0, t1, t2, ts)),
}

def .append_assoc(ctx2, ctx3) {
    Nil => Refl(ctx2.append(ctx3)),
    Cons(x, xs) =>
        xs.append_assoc(ctx2, ctx3)
          .cong(xs.append(ctx2).append(ctx3),
                xs.append(ctx2.append(ctx3)),
                comatch { .ap(xs0) => Cons(x, xs0) }),
}

def .append_nil {
    Nil => Refl(Nil),
    Cons(t, ts) => ts.append_nil.eq_cons(ts, ts.append(Nil), t),
}

def .empty_absurd(x, t) { }

def .elem_unique(ctx, t1, t2) { Here(x, x0) => Refl(t2) }

def .ctx_lookup(ctx2, t1, t2) {
    Nil => comatch { .ap(h) => h.elem_unique(ctx2, t1, t2) },
    Cons(t, ts) =>
        comatch {
            .ap(h) => h.match { There(x1, x2, x3, x4, h0) => ts.ctx_lookup(ctx2, t1, t2).ap(h0) }
        },
}

def .elem_append_first(ctx2, t, x) {
    Nil => comatch { .ap(h_lt) => comatch { .ap(h_elem) => h_lt.match { } } },
    Cons(t', ts) =>
        comatch {
            .ap(h_lt) =>
                comatch {
                    .ap(h_elem) =>
                        h_elem.match {
                            Here(x4, x5) => Here(t', ts),
                            There(x', x4, x5, x6, h) =>
                                There(x',
                                      t,
                                      t',
                                      ts,
                                      ts.elem_append_first(ctx2, t, x')
                                        .ap(h_lt.le_unsucc(S(), ts.len))
                                        .ap(h)),
                        }
                }
        },
}

def .elem_append_pred(ctx2, t1, t2, x) {
    Nil =>
        comatch {
            .ap(h_gt) =>
                comatch {
                    .ap(h_elem) =>
                        h_elem.match {
                            Here(x4, x5) => h_gt.match { },
                            There(x4, x5, x6, x7, h) => h,
                        }
                }
        },
    Cons(t, ts) =>
        comatch {
            .ap(h_gt) =>
                comatch {
                    .ap(h_elem) =>
                        h_elem.match {
                            Here(x4, x5) => h_gt.match { },
                            There(x', x4, x5, x6, h) =>
                                h_gt.le_unsucc(S(ts.len), x')
                                    .s_pred(ts.len, x')
                                    .transport(S(x'.pred),
                                               x',
                                               comatch { .ap(x9) => <ZST> },
                                               There(x'.pred,
                                                     t1,
                                                     t,
                                                     ts.append(ctx2),
                                                     ts.elem_append_pred(ctx2, t1, t2, x')
                                                       .ap(h_gt.le_unsucc(S(ts.len), x'))
                                                       .ap(h))),
                        }
                }
        },
}

def .elim_bot { }

def .sym(x, y) { Refl(x0) => Refl(y) }

def .transport(x, y, p, prf) { Refl(x0) => prf }

def .cong(x, y, f) { Refl(x0) => Refl(f.ap(y)) }

def .eq_s(x, y) { Refl(x1) => Refl(S(y)) }

def .eq_cons(xs, ys, t) { Refl(x0) => Refl(Cons(t, ys)) }

def .pred {
    Z => Z,
    S(x) => x,
}

def .cmp(y) {
    Z =>
        y.match {
            Z => EQ,
            S(x) => LT,
        },
    S(x) =>
        y.match {
            Z => GT,
            S(y0) => x.cmp(y0),
        },
}

def .cmp_reflect(y) {
    Z =>
        y.match {
            Z => IsEQ(Z, Z, Refl(EQ), Refl(Z)),
            S(y0) => IsLT(Z, S(y0), Refl(LT), y0.z_le.le_succ(Z, y0)),
        },
    S(x) =>
        y.match {
            Z => IsGT(S(x), Z, Refl(GT), x.z_le.le_succ(Z, x)),
            S(y0) =>
                x.cmp_reflect(y0).match {
                    IsLT(x0, x1, h1, h2) => IsLT(S(x), S(y0), h1, h2.le_succ(S(x), y0)),
                    IsEQ(x0, x1, h1, h2) => IsEQ(S(x), S(y0), h1, h2.eq_s(x, y0)),
                    IsGT(x0, x1, h1, h2) => IsGT(S(x), S(y0), h1, h2.le_succ(S(y0), x)),
                },
        },
}

def .z_le {
    Z => LERefl(Z),
    S(x) => LESucc(Z, x, x.z_le),
}

def .le_succ(x, y) {
    LERefl(x0) => LERefl(S(y)),
    LESucc(x0, y0, h) => LESucc(S(x), S(y0), h.le_succ(x, y0)),
}

def .le_unsucc(x, y) {
    LERefl(x0) => LERefl(y),
    LESucc(x0, x1, h) => h.s_le(x, y),
}

def .s_le(x, y) {
    LERefl(x0) => LESucc(x, x, LERefl(x)),
    LESucc(x0, y', h) => LESucc(x, y', h.s_le(x, y')),
}

def .s_pred(x, y) {
    LERefl(x0) => Refl(S(x)),
    LESucc(x0, y', x1) => Refl(S()),
}

def .not {
    True => False,
    False => True,
}
