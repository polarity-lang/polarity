codata Fun(a b: Type) {
    Fun(a, b).ap(a b: Type, x: a): b,
}

data Eq(a: Type, x y: a) {
    Refl(a: Type, x: a): Eq(a, x, x),
}

data Bool { T, F }

codata Test { .test(x: Bool): Bool }

codef f: Fun(Bool, Test) { .ap(Bool, Bool, _) => comatch { .test(x) => x } }

let eq: Eq(Test, f.ap(Bool, Test, T), f.ap(Bool, Test, F)) {Refl(Test,
                                                                 f.ap(Bool, Test, T))}