data Nat { Z, S(n: Nat) }

data Eq(a: Type, x y: a) {
    Refl(a: Type, x: a): Eq(a, x, x)
}

#[transparent]
let transparentTwo: Nat {S(S(Z))}

/// This proof typechecks
let p2: Eq(Nat, S(S(Z)), transparentTwo) {Refl(Nat, S(S(Z)))}