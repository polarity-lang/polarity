data Nat {
    Z,
    S(n: Nat),
}

def Nat.add(y: Nat) : Nat {
    Z => y,
    S(x') => S(x'.add(y)),
}

data Vec(n: Nat) {
    Nil : Vec(Z),
    Cons(n: Nat, x: Nat, xs: Vec(n)) : Vec(S(n)),
}

def Vec(S(n)).head(n: Nat) : Nat {
    Cons(n', x, xs) => ?,
    Nil absurd,
}

def Vec(S(n)).tail(n: Nat) : Vec(n) {
    Cons(n', x, xs) => ?,
    Nil absurd,
}

def Vec(n).append(n: Nat, m: Nat, ys: Vec(m)) : Vec(n.add(m)) {
    Nil => ys,
    Cons(n', x, xs) => Cons(n'.add(m), x, xs.append(n', m, ys))
}

data Top { Unit }

def Top.example1: Vec(2) {
    Unit => Cons(1, 0, Cons(0, 0, Nil))
}

def Top.example2: Vec(4) {
    Unit => Unit.example1.append(2, 2, Unit.example1)
}

data Bool {
    True,
    False
}

def Bool.not() : Bool {
    True => False,
    False => True
}

def Bool.if_then_else(a: Type, then: a, else: a) : a {
    True => then,
    False => else
}

codata Stream {
    sHead : Nat,
    sTail : Stream,
}

codef Zeroes() : Stream {
    sHead() => Z,
    sTail() => Zeroes()
}

codef Ones() : Stream {
    sHead() => S(Z),
    sTail() => ?
}

codef Alternate(choose: Bool) : Stream {
    sHead() => choose.if_then_else(Nat, S(?), Z),
    sTail() => Alternate(choose.not())
}

