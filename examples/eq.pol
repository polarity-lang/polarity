codata Fun(a b: Type) {
    Fun(a, b).ap(a b: Type, x: a): b,
}

data Eq(a: Type, x y: a) {
    Refl(a: Type, x: a): Eq(a, x, x),
}

def Eq(a, x, y).sym(a: Type, x y: a): Eq(a, y, x) { Refl(a, x) => Refl(a, x) }

def Eq(a, x, y).subst(a: Type, x y: a, p: a -> Type, prf: p.ap(a, Type, x)): p.ap(a, Type, y) {
    Refl(a, x) => prf,
}

def Eq(a, x, y).trans(a: Type, x y z: a, h: Eq(a, y, z)): Eq(a, x, z) { Refl(a, x) => h }

def Eq(a, x, y).cong(a b: Type, x y: a, f: a -> b): Eq(b, f.ap(a, b, x), f.ap(a, b, y)) {
    Refl(a, x) => Refl(b, f.ap(a, b, x)),
}
