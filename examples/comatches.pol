codata Fun(a b: Type) {
    Fun(a, b).ap(a b: Type, x: a): b
}

codata Pi(a: Type, p: a->Type) {
    Pi(a, p).pi_elim(a: Type, p: a->Type, x: a): p.ap(a, Type, x)
}

data Top { Unit }

codef IdType: Fun(Type, Type) { ap(_, _, a) => a->a }

def Top.id: Pi(Type, IdType) {
    Unit => (comatch { pi_elim(_, _, a) => comatch { ap(_, _, x) => x } }):Pi(Type, IdType)
}

def Top.const: Pi(Type, comatch { ap(_, _, a) => Pi(Type, comatch { ap(_, _, b) => a->b->a }) }) {
    Unit =>
        comatch {
            pi_elim(_, _, a) =>
                comatch {
                    pi_elim(_, _, b) => comatch { ap(_, _, x) => comatch { ap(_, _, y) => x } }
                }
        }
}
