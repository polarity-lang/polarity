data Nat {
    Z,
    S(n: Nat)
}

data Bool {
    True,
    False
}

def Bool.not() : Bool {
    True => False,
    False => True
}

def Bool.if_then_else(a: Type, then: a, else: a) : a {
    True => then,
    False => else
}

codata Stream {
    head : Nat,
    tail : Stream,
}

codef Zeroes() : Stream {
    head() => Z,
    tail() => Zeroes()
}

codef Ones() : Stream {
    head() => S(Z),
    tail() => Ones()
}

codef Alternate(choose: Bool) : Stream {
    head() => choose.if_then_else(Nat, S(Z), Z),
    tail() => Alternate(choose.not())
}
