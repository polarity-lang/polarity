codata Fun(A B: Type) {
  Fun(A,B).ap(A B: Type, x: A): B
}

codef StepFun(P: Nat -> Type): Fun(Nat, Type) {
    ap(_,_,x) => P.ap(Nat, Type, x) -> P.ap(Nat, Type, S(x))
}

codata Π(A: Type, T: Fun(A, Type)) {
  Π(A,T).dap(A: Type, T: Fun(A,Type), x: A): T.ap(A,Type,x)
}

codata Nat {
    (n: Nat).ind( P: Fun(Nat,Type)
                    , base: P.ap(Nat,Type,Z)
                    , step: Π(Nat, StepFun(P))
                    ) : P.ap(Nat,Type,n)
}

codef Z: Nat {
    ind(P, base, step) => base
}

codef S(m: Nat): Nat {
    ind(P, base, step) => step.dap(Nat, StepFun(P), m)
        .ap(P.ap(Nat, Type, m), P.ap(Nat, Type, S(m)), m.ind(P, base, step))
}
