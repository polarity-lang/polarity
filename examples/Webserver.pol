data Nat {
    Z,
    S(n: Nat),
}

data Bool { True, False }

codata Fun(a b: Type) {
    Fun(a, b).ap(a: Type, b: Type, x: a) : b,
}

codata Π(A: Type, T: Fun(A, Type)) {
  Π(A,T).dap(A: Type, T: Fun(A,Type), x: A): T.ap(A,Type,x)
}

codata ×₋(a b : Type) {
    ×₋(a,b).fst(a : Type, b: Type) : a,
    ×₋(a,b).snd(a : Type, b: Type) : b
}

codef Pair(a b : Type, x : a, y : b) : ×₋(a,b) {
    fst(a,b) => x,
    snd(a,b) => y
}

data Response {
    Forbidden,
    Return(n : Nat)
}

codata User {
    hasCredentials : Bool
}

codata State(loggedIn: Bool) {
    State(False).login(u : User) : State(u.hasCredentials),
    State(True).logout : State(False),
    State(True).increment : State(True),
    State(True).set(n : Nat) : State(True),
    (self: State(True)).set_idempotent(b : Bool, n : Nat) : Eq(State(True), self.set(n), self.set(n).set(n)),
    (self: State(True)).setResult(b : Bool, n : Nat) : Eq(Nat, n, self.set(n).counter(True)),
    State(b).counter(b : Bool) : Nat
}

codata Utils {
    put_twice(n: Nat, route: Route, state: State(route.requiresLogin)): ×₋(State(route.requiresLogin), Response)
}

codef MkUtils: Utils {
    put_twice(n, route, state) =>
        route.put(n).ap(State(route.requiresLogin), ×₋(State(route.requiresLogin), Response), route.put(n).ap(State(route.requiresLogin), ×₋(State(route.requiresLogin), Response), state).fst(State(route.requiresLogin), Response))
}

data Eq(t : Type, a: t, b: t) {
    Refl(t : Type, a : t) : Eq(t, a, a)
}

def Eq(t1, a, b).cong_pair(t1 t2: Type, a b: t1, c: t2): Eq(×₋(t1, t2), Pair(t1, t2, a, c), Pair(t1, t2, b, c)) {
    Refl(_, _) => Refl(×₋(t1, t2), Pair(t1, t2, b, c))
}

codata Route {
    requiresLogin: Bool,
    (self: Route).get: State(self.requiresLogin) -> Response,
    (self: Route).post: State(self.requiresLogin) -> ×₋(State(self.requiresLogin),Response),
    (self: Route).put(n : Nat): State(self.requiresLogin) -> ×₋(State(self.requiresLogin),Response),
    (self: Route).put_idempotent(n : Nat) : Π(State(self.requiresLogin),
        \state. Eq(×₋(State(self.requiresLogin), Response), self.put(n).ap(State(self.requiresLogin), ×₋(State(self.requiresLogin), Response), state), MkUtils.put_twice(n, self, state)))
}

codef Index: Route {
    requiresLogin => False,
    post => \state. comatch { fst(a,b) => state, snd(a,b) => Forbidden },
    get => \state. Return(state.counter(False)),
    put(n) => \state. Pair(State(False), Response, state, Forbidden),
    put_idempotent(n) => comatch {
        dap(_, _, state) => Refl(×₋(State(False), Response), Pair(State(False), Response, state, Forbidden))
    }
}

codef Admin: Route {
    requiresLogin => True,
    post => \state. comatch { fst(a,b) => state.increment, snd(a,b) => Return(state.increment.counter(True)) },
    get => \state. Return(state.counter(True)),
    put(n) => \state. Pair(State(True), Response, state.set(n), Return(n)),
    put_idempotent(n) => comatch {
        dap(_, _, state) => state.set_idempotent(True, n).cong_pair(State(True), Response, state.set(n), state.set(n).set(n), Return(n))
    }
}
