data Nat { Z, S(n: Nat) }

def Nat.add(y: Nat): Nat {
    Z => y,
    S(x') => S(x'.add(y))
}

data Vec(n: Nat) {
    Nil: Vec(Z),
    Cons(n x: Nat, xs: Vec(n)): Vec(S(n))
}

def Vec(S(n)).head(n: Nat): Nat {
    Cons(n', x, xs) => x,
    Nil absurd
}

def Vec(S(n)).tail(n: Nat): Vec(n) {
    Cons(n', x, xs) => xs,
    Nil absurd
}

def Vec(n).append(n m: Nat, ys: Vec(m)): Vec(n.add(m)) {
    Nil => ys,
    Cons(n', x, xs) => Cons(n'.add(m), x, xs.append(n', m, ys))
}

data Top { Unit }

def Top.example1: Vec(S(S(Z))) { Unit => Cons(S(Z), Z, Cons(Z, Z, Nil)) }

let main: Vec(S(S(S(S(Z))))) {Unit.example1.append(S(S(Z)), S(S(Z)), Unit.example1)}
