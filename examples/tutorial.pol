data Bool { T, F }

def Bool.not: Bool {
    T => F,
    F => T
}

def Bool.if_then_else(a: Type, then else: a): a {
    T => then,
    F => else
}

data Nat { Z, S(n: Nat) }

def Nat.add(y: Nat): Nat {
    Z => y,
    S(x') => S(x'.add(y))
}

data Vec(n: Nat) {
    VNil: Vec(Z),
    VCons(n x: Nat, xs: Vec(n)): Vec(S(n))
}

codata Stream { .head: Nat, .tail: Stream }

codata NatToNat { .ap(x: Nat): Nat }

let main: Nat { 2.add(3) }


data Option(a: Type) {
    None(a: Type): Option(a),
    Some(a: Type, x: a): Option(a)
}

data List(a: Type) {
    Nil(a: Type): List(a),
    Cons(a: Type, x: a, xs: List(a)): List(a)
}

def List(a).hd(a: Type): Option(a) {
    Nil(a) => None(a),
    Cons(a, x, xs) => Some(a, x)
}

codef Zeroes: Stream {
    .head => Z,
    .tail => Zeroes
}

codef Ones: Stream {
    .head => S(Z),
    .tail => Ones
}

codef Alternate(choose: Bool): Stream {
    .head => choose.if_then_else(Nat, S(Z), Z),
    .tail => Alternate(choose.not)
}
