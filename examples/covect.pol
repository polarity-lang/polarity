data Nat {
    Z,
    S(n: Nat),
}

def Nat.add(y: Nat) : Nat {
    Z => y,
    S(x') => S(x'.add(y)),
}

codata Vec(n: Nat) {
    Vec(S(n)).tail(n: Nat) : Vec(n),
    Vec(n).append(n: Nat, m: Nat, ys: Vec(m)) : Vec(n.add(m))
}

codef Nil() : Vec(Z) {
    append(n, m, ys) => ys,
    tail(n) absurd
}

codef Cons(n': Nat, x: Nat, xs: Vec(n')): Vec(S(n')) {
    tail(n) => xs,
    append(n, m, ys) => Cons(n'.add(m), x, xs.append(n', m, ys))
}

data Top { Unit }

def Top.example1: Vec(2) {
    Unit => Cons(1, 0, Cons(0, 0, Nil))
}

def Top.example2: Vec(4) {
    Unit => Unit.example1.append(2, 2, Unit.example1)
}

Unit.example2
