use std::rc::Rc;

use num_bigint::BigUint;

use crate::cst::*;

use super::util::span;

#[LALR]
grammar;

// Tokens
match {
    // Symbols
    "(", ")", "{", "}", ";", ":=", "=>", ",", ":", ".", "?", "...",
    "->", "\\",
    // Names
    "_",
    r"[a-zα-ω][a-zα-ωA-ZΑ-Ω0-9_]*['⁺⁻₀₁₂₃₄₅₆₇₈₉₊₋]*",
    r"[A-ZΑ-Ω𝔹ℕ𝕍∃∀×][a-zα-ωA-ZΑ-Ω0-9_]*['⁺⁻₀₁₂₃₄₅₆₇₈₉₊₋]*",
    // Literals
    r"0|[1-9][0-9]*",
    // Keywords
    "@hidden",
    "data", "codata",
    "def", "codef",
    "match", "as", "comatch",
    "absurd", "..absurd",
    "Type",
    // Comments and whitespace
    r"\s*" => { }, // Skip whitespace
    r"-- \|[^\n\r]*[\n\r]*", // Don't skip doc-comments
    r"--(([^ \n\r]| [^\|\n\r])[^\n\r]*)?[\n\r]*" => { }, // Skip `--` comments
}

// Utils
// Based in part on Gluons grammar (https://github.com/gluon-lang/gluon/blob/fac08dcff7a019440dd8d0a886abdb18baa58198/parser/src/grammar.lalrpop)

Comma<Rule>: Vec<Rule> =
    <rules: (<Rule> ",")*> <last: Rule?> => {
        let mut rules = rules;
        rules.extend(last);
        rules
    };

Parens<Rule>: Rule =
    "(" <rule: Rule> ")" => rule;

Braces<Rule>: Rule =
    "{" <rule: Rule> "}" => rule;

ParenthesizedArgs<Rule>: Vec<Rule> = Parens<Comma<Rule>>;
OptParenthesizedArgs<Rule>: Vec<Rule> = <args: Parens<Comma<Rule>>?> => args.unwrap_or_default();

BracedArgs<Rule>: Vec<Rule> = Braces<Comma<Rule>>;
OptBracedArgs<Rule>: Vec<Rule> = <args: Braces<Comma<Rule>>?> => args.unwrap_or_default();

Param: Param = <name: BindingSite> <names: BindingSite*> ":" <typ: Exp> => Param { name, names, typ } ;

ParamInst: ParamInst = <l: @L> <name: BindingSite> <r: @R> => ParamInst { span: span(l, r), name };

Params: Vec<Param> = ParenthesizedArgs<Param>;
OptParams: Vec<Param> = OptParenthesizedArgs<Param>;

Telescope: Telescope = <params: Params> => Telescope(params);
OptTelescope: Telescope = <params: OptParams> => Telescope(params);

TelescopeInst: TelescopeInst = <params: Parens<Comma<ParamInst>>> => TelescopeInst(params);
OptTelescopeInst: TelescopeInst = <params: Parens<Comma<ParamInst>>?> => TelescopeInst(params.unwrap_or_default());

Args: Vec<Rc<Exp>> = ParenthesizedArgs<Exp>;
OptArgs: Vec<Rc<Exp>> = OptParenthesizedArgs<Exp>;

Hidden: bool = <hidden: "@hidden"?> => hidden.is_some();

OmitAbsurd: bool = <absurd: "..absurd"?> => absurd.is_some();

DocCommentHelper: String = <doc: r"-- \|[^\n\r]*[\n\r]*"> => doc.strip_prefix("-- |").unwrap().trim().to_owned();
DocComment: DocComment = <docs: DocCommentHelper+> => DocComment { docs };

// Program

pub Prg: Prg = {
    <items: Decl*> <exp: Exp?> => Prg { items, exp },
}

pub Decl: Decl = {
    <l: @L> <doc: DocComment?> <hidden: Hidden> "data" <name: UpperIdent> <params: OptTelescope> "{" <ctors: Comma<Ctor>> "}" <r: @R> => Decl::Data(Data { span: span(l, r), doc, name, hidden, params, ctors }),
    <l: @L> <doc: DocComment?> <hidden: Hidden> "codata" <name: UpperIdent> <params: OptTelescope> "{" <dtors: Comma<Dtor>> "}" <r: @R> => Decl::Codata(Codata { span: span(l, r), doc, name, hidden, params, dtors }),
    <l: @L> <doc: DocComment?> <hidden: Hidden> "def" <scrutinee: Scrutinee> "." <name: LowerIdent> <params: OptTelescope> ":" <ret_typ: Exp> "{" <body: Match> "}" <r: @R> => Decl::Def(Def { span: span(l, r), doc, name, hidden, params, scrutinee, ret_typ, body }),
    <l: @L> <doc: DocComment?> <hidden: Hidden> "codef" <name: UpperIdent> <params: OptTelescope> ":" <typ: TypApp> "{" <body: Match> "}" <r: @R> => Decl::Codef(Codef { span: span(l, r), doc, name, hidden, params, typ, body }),
}

Ctor: Ctor = {
    <l: @L> <doc: DocComment?> <name: UpperIdent> <params: OptTelescope> <typ: (":" <TypApp>)?> <r: @R> => Ctor { span: span(l, r), doc, name, params, typ },
}

Dtor: Dtor = {
    <l: @L> <doc: DocComment?> <destructee: Destructee> <name: LowerIdent> <params: OptTelescope> ":" <ret_typ: Exp> <r: @R> => Dtor { span: span(l, r), doc, name, params, destructee, ret_typ },
}

pub Match : Match = {
    <l: @L> <cases: Comma<Case>> <omit_absurd: OmitAbsurd> <r: @R> => Match { span: span(l, r), cases, omit_absurd },
}

pub Case : Case = {
    <l: @L> <name: Ident> <args: OptTelescopeInst> <body: AbsurdOrBody> <r: @R> => Case { span: span(l, r), name, args, body },
}

pub AbsurdOrBody: Option<Rc<Exp>> = {
    "absurd" => None,
    "=>" <body: Exp> => Some(body),
}

pub Destructee: Destructee = {
    <l: @L> <scrutinee: (<Scrutinee> ".")?> <r: @R> => match scrutinee {
        Some(Scrutinee { span, name, typ }) => Destructee { span, name, typ: Some(typ) },
        None => Destructee { span: span(l, r), name: None, typ: None },
    }
}

pub Scrutinee: Scrutinee = {
    <l: @L> "(" <name: BindingSite> ":" <typ: TypApp> ")" <r: @R> => Scrutinee { span: span(l, r), name: match name { BindingSite::Wildcard => None, BindingSite::Var { name } => Some(name) }, typ },
    <l: @L> <typ: TypApp> <r: @R> => Scrutinee { span: span(l, r), name: None, typ },
}

pub TypApp: TypApp = {
    <l: @L> <name: UpperIdent> <args: OptArgs> <r: @R> => TypApp { span: span(l, r), name, args },
}

pub Exp: Rc<Exp> = {
    <l: @L> <exp: Ops> ":" <typ: Exp> <r: @R> => Rc::new(Exp::Anno { span: span(l, r), exp, typ }),
    <l: @L> <from: Ops> "->" <to: Exp> <r: @R> => Rc::new(Exp::Fun { span: span(l, r), from, to }),
    <l: @L> "\\" <var: ParamInst> "." <body: Exp> <r: @R> => Rc::new(Exp::Lam { span: span(l, r), var, body }),
    Ops,
}

pub Ops = {
    <l: @L> <exp: Ops> "." <name: Ident> <args: OptArgs> <r: @R> => Rc::new(Exp::DotCall { span: span(l, r), exp, name, args }),
    <l: @L> <on_exp: Ops> "." "match" <name: Ident?> <motive: Motive?> "{" <body: Match> "}" <r: @R> => Rc::new(Exp::Match { span: span(l, r), name, on_exp, motive, body }),
    App,
}

pub App = {
    <l: @L> <name: Ident> <args: Args> <r: @R> => Rc::new(Exp::Call { span: span(l, r), name, args }),
    <l: @L> "comatch" <name: Ident?> "{" <body: Match> "}" <r: @R> => Rc::new(Exp::Comatch { span: span(l, r), name, is_lambda_sugar: false, body }),
    Builtins,
}

pub Builtins: Rc<Exp> = {
    <l: @L>"Type" <r: @R> => Rc::new(Exp::Type { span: span(l, r) }),
    Hole,
}

pub Hole: Rc<Exp> = {
    <l: @L> "?" <r: @R> => Rc::new(Exp::Hole { span: span(l, r), kind: HoleKind::Todo }),
    <l: @L> "..." <r: @R> => Rc::new(Exp::Hole { span: span(l, r), kind: HoleKind::Omitted }),
    Atom,
}

pub Atom: Rc<Exp> = {
    <l: @L> <s: r"0|[1-9][0-9]*"> <r: @R> => Rc::new(Exp::NatLit { span: span(l, r), val: BigUint::parse_bytes(s.as_ref(), 10).unwrap() }),
    "(" <exp: Exp> ")" => exp,
    <l: @L> <name: Ident> <r: @R> => Rc::new(Exp::Call { span: span(l, r), name, args: Args::new() }),
}

Motive: Motive = {
    <l: @L> "as" <param: ParamInst> "=>" <ret_typ: Exp> <r: @R> => Motive { span: span(l, r), param, ret_typ },
}

// Names

BindingSite: BindingSite = {
    <i: Ident> => BindingSite::Var { name: i },
    "_" => BindingSite::Wildcard,
}

Ident: String = {
    <s: LowerIdent> => s.to_owned(),
    <s: UpperIdent> => s.to_owned(),
}
LowerIdent: String = <s:r"[a-zα-ω][a-zα-ωA-ZΑ-Ω0-9_]*['⁺⁻₀₁₂₃₄₅₆₇₈₉₊₋]*"> => s.to_owned();
UpperIdent: String = <s:r"[A-ZΑ-Ω𝔹ℕ𝕍∃∀×][a-zα-ωA-ZΑ-Ω0-9_]*['⁺⁻₀₁₂₃₄₅₆₇₈₉₊₋]*"> => s.to_owned();
