codata Fun(A B: Type) {
  Fun(A,B).ap(A B: Type, x: A): B
}

codef StepFun(P: Nat -> Type): Fun(Nat, Type) {
    ap(_,_,x) => P.ap(Nat, Type, x) -> P.ap(Nat, Type, S(x))
}

codata Î (A: Type, T: Fun(A, Type)) {
  Î (A,T).dap(A: Type, T: Fun(A,Type), x: A): T.ap(A,Type,x)
}

data Nat { S(m: Nat), Z }

def (n: Nat).ind(P: Nat -> Type, base: P.ap(Nat, Type, Z), step: Î (Nat, StepFun(P)))
    : P.ap(Nat, Type, n) {
    S(m) =>
        step.dap(Nat, StepFun(P), m)
            .ap(P.ap(Nat, Type, m), P.ap(Nat, Type, S(m)), m.ind(P, base, step)),
    Z => base
}
