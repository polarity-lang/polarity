codata Fun(A B: Type) {
  Fun(A,B).ap(A B: Type, x: A): B
}

data ∃₊(T: Type -> Type) {
  Pack(T: Type -> Type, A: Type, W: T.ap(Type,Type,A)): ∃₊(T)
}

def ∃₊(T).π₁(T: Type -> Type): Type {
  Pack(T, A, W) => A,
}

def (self: ∃₊(T)).π₂(T: Type -> Type): T.ap(Type,Type, self.π₁(T)) {
  Pack(T, A, W) => W,
}
