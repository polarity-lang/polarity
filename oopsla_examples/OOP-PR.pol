data A {}
data MaybeA() {
    Just(a: A): MaybeA,
    Error: MaybeA
}
data Eq (a: Type, x: a, y: a) {
    Refl(a: Type, x: a) : Eq(a, x, x)
}
codata Fun(a b: Type) {
    Fun(a, b).ap(a: Type, b: Type, x: a) : b
}

codata PR {
    store(a: A): PR,
    read: MaybeA,
    empty: PR,
    -- | Reading from the empty buffer yields an error
    (s: PR).assert_empty: Eq(MaybeA, s.empty.read, Error),
    -- | We can store an element into an empty buffer
    (s: PR).assert_empty_store(a: A): Fun(Eq(MaybeA, s.read, Error), Eq(MaybeA, s.store(a).read, Just(a))),
    -- | We cannot replace the element in the buffer without calling `empty`
    (s: PR).assert_persistent(a b: A): Fun(Eq(MaybeA, s.read, Just(a)), Eq(MaybeA, s.store(b).read, Just(a))),
}